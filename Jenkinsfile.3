pipeline {
  agent {
    dockerfile {
      args '-v $HOME/.m2:/root/.m2 -v $PWD:$PWD -w $PWD -v /var/run/docker.sock:/var/run/docker.sock'
      filename 'Dockerfile'
    }
  }
  stages {
    stage('no agent') {
      steps {
        sh(script: 'java -version', returnStdout: true)
      }
    }
    stage('Build') {
      steps {
        sh "./mvnw -B -Ddocker.tags.extra=${env.TAGS_EXTRA} clean package -DskipTests"
        archiveArtifacts artifacts: '**/target/*.jar'
        stash includes: '**/target/*.jar', name: 'jar'
      }
    }
    stage('Build #2') {
      steps {
        sh "./mvnw -B -Ddocker.tags.extra=${env.TAGS_EXTRA} clean package -DskipTests"
        archiveArtifacts artifacts: '**/target/*.jar'
        stash includes: '**/target/*.jar', name: 'jar'
      }
    }
    stage('Integration test') {
      agent {
        docker {
            reuseNode true
            image 'openjdk:11.0-jdk-slim'
            args  '-v /var/run/docker.sock:/var/run/docker.sock'
        }
      }
      steps {
        unstash 'jar'
        sh './mvnw -B -Ddocker.skip verify'
      }
      post {
        always {
          junit allowEmptyResults: true, testResults:"**/failsafe-reports/**/*.xml"
        }
      }
    }
  }
}
